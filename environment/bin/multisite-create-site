#!/bin/bash
#
# This is a positional arguments-only example of Argbash potential
#
# ARG_OPTIONAL_SINGLE([scheme],[],[http or https, if defined, slug will be used as url])
# ARG_POSITIONAL_SINGLE([slug],[The site slug])
# ARG_HELP([The general script's help msg])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.9.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='h'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_scheme=


print_help()
{
	printf '%s\n' "The general script's help msg"
	printf 'Usage: %s [--scheme <arg>] [-h|--help] <slug>\n' "$0"
	printf '\t%s\n' "<slug>: The site slug"
	printf '\t%s\n' "--scheme: http or https, if defined, slug will be used as url (no default)"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			--scheme)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_scheme="$2"
				shift
				;;
			--scheme=*)
				_arg_scheme="${_key##--scheme=}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="'slug'"
	test "${_positionals_count}" -ge 1 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 1 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 1 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 1 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_slug "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

# Read and import dotenv variables to script
dotenv () {
  DOTENV_SHELL_LOADER_SAVED_OPTS=$(set +o)
  set -o allexport
  [ -f $1 ] && source $1
  set +o allexport
  eval "$DOTENV_SHELL_LOADER_SAVED_OPTS"
  unset DOTENV_SHELL_LOADER_SAVED_OPTS
}

# Create new site inner the network
set -xe

# Go to project root
cd $( dirname $0 )/../..


. ${BIN_DIR}/shared/docker_compose.sh

# WP core directory
WP_ROOT=public/wp

eval $( echo ${WP_BASH} -c "\"
	set -x;

	wp --path=${WP_ROOT} site create --slug=${_arg_slug} --porcelain | xargs -I % wp --path=${WP_ROOT} site list --blog_id=% --field=url | xargs -I % bash -c '
		# wp --path=${WP_ROOT} --url=% option update siteurl %wp;
		wp --path=${WP_ROOT} theme activate ${THEME_ACTIVE} --url=%;
		[ -n ${_arg_scheme} ]
			&& wp --path=${WP_ROOT} --url=% option update home ${_arg_scheme}://${_arg_slug}/wp
			&& wp --path=${WP_ROOT} --url=% option update siteurl ${_arg_scheme}://${_arg_slug}/wp
			|| wp --path=${WP_ROOT} --url=% option update siteurl %wp;
	';

	[ -n ${_arg_scheme} ]
			&& wp --path=${WP_ROOT} db query \\\"UPDATE wp_blogs SET domain='${_arg_slug}', path = '/' WHERE path like '/${_arg_slug}/%' OR domain like '${_arg_slug}%'\\\"


\"" | sed -e '/^#/d;s/[^\/]#.*$//' ) # `sed` removes the comments to run the commands on eval

# ] <-- needed because of Argbash
