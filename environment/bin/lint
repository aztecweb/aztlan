#!/bin/bash

# This hook runs all code standards before commit

COLOR_ERROR="\033[0;31m"
COLOR_SUCCESS="\033[0;32m"
COLOR_DEFAULT="\033[0m"

EXIT_CODE=0

# General functions
function print_success() {
	printf "${COLOR_SUCCESS}Success\n${COLOR_DEFAULT}"
}

function print_error() {
	printf "${COLOR_ERROR}Error\n${COLOR_DEFAULT}"
}

function return_run() {
	echo ""
	echo "#######################"
	echo "        $1"
	echo "#######################"
	echo "$2"
}

# Code standards functions
function run_phpcs() {
	printf "Running PHPCS\t........... ";
	PHPCS=$(docker_compose run --rm phpqa phpcs)
	if [ -z "${PHPCS}" ]
	then
		print_success
	else
		print_error;
		EXIT_CODE=1;
	fi
}

function run_phpcbf() {
	NO_ERRORS="No fixable errors"
	printf "Running PHPCBF\t........... ";
	PHPCBF=$(docker_compose run --rm phpqa phpcbf)
	[[ $PHPCBF =~ "$NO_ERRORS" ]]  && print_success || print_error
}

function run_phpstan() {
	printf "Running PHPSTAN\t........... ";
	PHPSTAN=$(docker_compose run --rm phpqa phpstan analyse 2> /dev/null)
	if [ $? -eq 0 ]
	then
		print_success
	else
		print_error;
		EXIT_CODE=1;
	fi

	printf "Running PHPSTAN (TESTS)\t... ";
	PHPSTANTESTS=$(docker_compose run --rm phpqa phpstan analyse -c tests/phpstan.neon.dist 2> /dev/null)
	if [ $? -eq 0 ]
	then
		print_success
	else
		print_error;
		EXIT_CODE=1;
	fi
}

function run_stylint() {
	printf "Running STYLINT\t........... ";
	STYLINT=$(docker_compose run --rm assets-node npm run lint:style)

	if [[ ! "${STYLINT}" =~ "Errors" ]] && [[ ! "${STYLINT}" =~ "Warnings" ]];
	then
		print_success;
	else
		print_error;
		EXIT_CODE=1;
	fi
}

function run_eslint() {
	printf "Running ESLINT\t........... ";
	ESLINT=$(docker_compose run --rm assets-node npm run lint:js)

	if [[ ! "${ESLINT}" =~ "errors" ]] && [[ ! "${STYLINT}" =~ "warnings" ]];
	then
		print_success;
	else
		print_error;
		EXIT_CODE=1;
	fi
}

# Load environment
source environment/bin/shared/docker_compose.sh

# Run code standards functions
run_phpcbf
run_phpcs
run_phpstan
run_stylint
run_eslint

if [ ${EXIT_CODE} == 0 ]
then
	printf "\nCode Standards validation successfull \nCommiting... \n\n"
else
	return_run "PHPCBF" "$PHPCBF"
	return_run "PHPCS" "$PHPCS"
	return_run "PHPSTAN" "$PHPSTAN"
	return_run "PHPSTAN (TESTS)" "$PHPSTANTESTS"
	return_run "STYLINT" "$STYLINT"
	return_run "ESLINT" "$ESLINT"
fi

exit ${EXIT_CODE};
