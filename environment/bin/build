#!/bin/bash

set -Eeuo pipefail

trap "exit" ERR

trap "exit" INT

main() {
	parse_commandline "$@"
	handle_passed_args_count
	assign_positional_args 1 "${_positionals[@]}"
	import_shell_helpers

	if ! dotenv_exists; then
		echo ".env does not exist. A copy has been created."
		cp .env.example .env
	fi

	dotenv .env

	set -x

	pull_fresh_images
	if is_dev_build && is_filesystem_build; then
		pull_test_fresh_images
		enable_pre_commit
	fi

	set_script_variables

	if is_filesystem_build; then
		create_directory_and_give_permissions_to_http_user ${LANGUAGES_DIR}
		create_directory_and_give_permissions_to_http_user ${UPGRADE_DIR}
		create_directory_and_give_permissions_to_http_user ${UPLOADS_DIR}
		create_directory_and_give_permissions_to_http_user ${XDEBUG_DIR}
	fi

	create_public_packages_directories
	create_symlink_mu-plugins
	clear_themes_and_plugins_folder
	install_private_plugins
	install_private_themes
	configure_composer_token
	install_composer_packages
	download_and_install_languages_packages
	shutdown_network

	if is_image_build; then
		build_docker_image
	fi
}

# ARG_POSITIONAL_SINGLE([target],[dev or dist],[])
# ARG_POSITIONAL_SINGLE([type],[filesystem or image],[])
# ARG_HELP([Aztlan - A full cycle DevOps WordPress environment])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.9.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate

die() {
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}

begins_with_short_option() {
	local first_option all_short_options='h'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
# THE DEFAULTS INITIALIZATION - OPTIONALS

print_help() {
	printf '%s\n' "Aztlan - A full cycle DevOps WordPress environment"
	printf 'Usage: %s [-h|--help] <target> <type>\n' "$0"
	printf '\t%s\n' "<target>: dev or dist"
	printf '\t%s\n' "<type>: filesystem or image"
	printf '\t%s\n' "-h, --help: Prints help"
}

parse_commandline() {
	_positionals_count=0
	while test $# -gt 0; do
		_key="$1"
		case "$_key" in
		-h | --help)
			print_help
			exit 0
			;;
		-h*)
			print_help
			exit 0
			;;
		*)
			_last_positional="$1"
			_positionals+=("$_last_positional")
			_positionals_count=$((_positionals_count + 1))
			;;
		esac
		shift
	done
}

handle_passed_args_count() {
	local _required_args_string="'target' and 'type'"
	test "${_positionals_count}" -ge 2 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 2 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 2 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 2 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}

assign_positional_args() {
	local _positional_name _shift_for=$1
	_positional_names="_arg_target _arg_type "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}; do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])

dotenv_exists() {
	[[ -f ".env" ]] && return 0 || return 1
}

is_image_build() {
	[[ "${_arg_type}" == "image" ]]
}

is_filesystem_build() {
	[[ "${_arg_type}" == "filesystem" ]]
}

is_dev_build() {
	[[ "${_arg_target}" == "dev" ]]
}

is_dist_build() {
	[[ "${_arg_target}" == "dist" ]]
}

docker_compose_run_with_host_user_bash() {
	docker_compose_run_with_host_user wordpress-base bash -c "$@"
}

import_shell_helpers() {
	ENVIRONMENT_DIR="$(basename $(
		cd "$(dirname ${BASH_SOURCE[0]})/../"
		pwd -P
	))"

	. ${ENVIRONMENT_DIR}/bin/shared/docker_compose.sh
	. ${ENVIRONMENT_DIR}/bin/shared/dotenv.sh
	. ${ENVIRONMENT_DIR}/bin/shared/docker_utils.sh
	. ${ENVIRONMENT_DIR}/bin/shared/utils.sh
}

set_script_variables() {
	# WP packages public directory
	PUBLIC_PACKAGES_DIR="public/packages"
	UPLOADS_DIR=$(docker_compose_run_with_host_user wordpress-base printenv UPLOADS_DIR)
	THEMES_DIR="${PUBLIC_PACKAGES_DIR}/themes"
	PLUGINS_DIR="${PUBLIC_PACKAGES_DIR}/plugins"
	MU_PLUGIN_DIR="${PUBLIC_PACKAGES_DIR}/mu-plugins"
	LANGUAGES_DIR="${PUBLIC_PACKAGES_DIR}/languages"
	UPGRADE_DIR="${PUBLIC_PACKAGES_DIR}/upgrade"
	THEME_LANGUAGES_DIR="${LANGUAGES_DIR}/themes"
	PLUGINS_LANGUAGES_DIR="${LANGUAGES_DIR}/plugins"

	# Local WP packages data
	PACKAGES_DIR="wp-packages"
	PRIVATE_DIR="${PACKAGES_DIR}/private"
	PRIVATE_PLUGINS_PACKAGES="${PRIVATE_DIR}/plugins/*.zip"
	PRIVATE_THEMES_PACKAGES="${PRIVATE_DIR}/themes/*.zip"
	PACKAGES_LANGUAGES_DIR="${PACKAGES_DIR}/languages"
	PACKAGES_THEME_LANGUAGES_DIR="${PACKAGES_LANGUAGES_DIR}/themes"
	PACKAGES_PLUGINS_LANGUAGES_DIR="${PACKAGES_LANGUAGES_DIR}/plugins"

	# Set general variables
	HTTP_USER=$(docker_compose_run_with_host_user wordpress-base printenv HTTP_USER)
	WP_COMPOSER="docker_compose_run_with_host_user -w /app/wp-packages --entrypoint=composer wp"
	WP_BASH="wp bash"
	if is_dist_build; then
		COMPOSER_INSTALL_OPTIONS="--no-progress --no-interaction --prefer-dist --no-dev --optimize-autoloader -vvv"
		DOCKER_COMPOSE_DOWN_OPTIONS="--rmi local"
	else
		COMPOSER_INSTALL_OPTIONS="--no-progress --no-interaction -vv"
		DOCKER_COMPOSE_DOWN_OPTIONS=""
	fi

	set +x
	GLOTPRESS_PROJECT_ENV_URL=$(docker_compose_run_with_host_user wordpress-base printenv GLOTPRESS_PROJECT_ENV_URL)
	THEME_ACTIVE=$(docker_compose_run_with_host_user wordpress-base printenv THEME_ACTIVE)
	WP_LANG=$(docker_compose_run_with_host_user wordpress-base printenv WP_LANG)
	set -x

	XDEBUG_DIR="/app/xdebug"

	if is_image_build; then
		set +x
		VERSION=$(docker_compose_run_with_host_user wordpress-base printenv VERSION)
		REGISTRY_ENDPOINT=$(docker_compose_run_with_host_user wordpress-base printenv REGISTRY_ENDPOINT)
		REPOSITORY_NAME=$(docker_compose_run_with_host_user wordpress-base printenv REPOSITORY_NAME)
		set -x

		# List of files used to build the application
		BUILD_FILES=(
			cli/vendor
			environment/docker/
			inc/vendor
			inc/languages/
			inc/src/
			inc/autoload.php
			public/index.php
			public/wp-config.php
			public/packages
			public/wp
			themes/
		)

		# Files doesn't necessary after the build
		BUILD_CLEAN_FILES=(
			cli/composer.json
			cli/composer.lock
			inc/composer.json
			inc/composer.lock
			wp-packages/
			environment/docker/nginx/etc/conf.d-from-template/
		)

		BIN_DIR=$(dirname $0)
		ENV_ROOT=build
	fi
}

pull_fresh_images() {
	docker_compose pull && docker_compose build
}

pull_test_fresh_images() {
	docker_compose tests pull && docker_compose tests build
}

enable_pre_commit() {
	[[ -d ".git" ]] && docker_compose_run_with_host_user_bash "ln -fs ../../environment/bin/lint .git/hooks/pre-commit"
}

create_directory_and_give_permissions_to_http_user() {
	local directory="$1"
	[[ ! -d "${directory}" ]] && docker_compose_run_with_host_user_bash "mkdir -p ${directory}" || echo "The ${directory} already exists"
	[[ ! -L "${directory}" ]] && docker_compose_run_with_host_user_bash "setfacl -R -m g:${HTTP_USER}:rwx ${directory}/ && setfacl -Rd -m g:${HTTP_USER}:rwx ${directory}/" || echo "The ${directory} is a symlink"
}

create_public_packages_directories() {
	docker_compose_run_with_host_user_bash "mkdir -p ${THEMES_DIR} ${PLUGINS_DIR} ${THEME_LANGUAGES_DIR} ${PLUGINS_LANGUAGES_DIR}"
}

create_symlink_mu-plugins() {
	[[ ! -e ${MU_PLUGIN_DIR} ]] && docker_compose_run_with_host_user_bash "ln -fs ../../wp-packages/mu-plugins ${MU_PLUGIN_DIR}" || echo "The mu-plugin directory already exists"
}

clear_themes_and_plugins_folder() {
	docker_compose_run_with_host_user_bash "rm -Rf ${PUBLIC_PACKAGES_DIR}/{plugins,themes}/{*,.*}"
}

install_private_plugins() {
    docker_compose_run_with_host_user_bash "
        for zip_file in \$(find ${PRIVATE_PLUGINS_PACKAGES} -name '*.zip' 2>/dev/null); do
            unzip -qqod ${PLUGINS_DIR} \"\$zip_file\"
        done
    "
}

install_private_themes() {
    docker_compose_run_with_host_user_bash "
        for zip_file in \$(find ${PRIVATE_THEMES_PACKAGES} -name '*.zip' 2>/dev/null); do
            unzip -qqod ${THEMES_DIR} \"\$zip_file\"
        done
    "
}

configure_composer_token() {
	${WP_COMPOSER} config http-basic.aztec.repo.packagist.aztecweb.net token "${REPMAN_TOKEN}"
}

install_composer_packages() {
	exec 3</dev/tty || exec 3<&0
	while read composer_file
	do
		[[ -f $composer_file ]] && docker_compose_run_with_host_user -w /app/`dirname $composer_file` --entrypoint=composer wp install ${COMPOSER_INSTALL_OPTIONS} <&3
	done < <(list_all_versioned_composer_files)
	exec 3<&-
}

list_all_versioned_composer_files() {
	git ls-files | grep composer.json
}

download_and_install_languages_packages() {
	if [ ${GLOTPRESS_PROJECT_ENV_URL} ]; then
		URL_LANGUAGE_SET=pt-br/default/export-translations
		URL_LANGUAGE_THEME=${GLOTPRESS_PROJECT_ENV_URL}/theme/${URL_LANGUAGE_SET}
		URL_LANGUAGE_INC=${GLOTPRESS_PROJECT_ENV_URL}/inc/${URL_LANGUAGE_SET}
		[[ '200' = $(docker_compose_run_with_host_user_bash "curl -I -s -o /dev/null -w "%{http_code}" ${URL_LANGUAGE_THEME}"/) ]] && docker_compose_run_with_host_user_bash "wget -q -O themes/${THEME_ACTIVE}/languages/${WP_LANG}.po ${URL_LANGUAGE_THEME}/?format=po"
		[[ '200' = $(docker_compose_run_with_host_user_bash "curl -I -s -o /dev/null -w "%{http_code}" ${URL_LANGUAGE_THEME}"/) ]] && docker_compose_run_with_host_user_bash "wget -q -O themes/${THEME_ACTIVE}/languages/${WP_LANG}.mo ${URL_LANGUAGE_THEME}/?format=mo"
		[[ '200' = $(docker_compose_run_with_host_user_bash "curl -I -s -o /dev/null -w "%{http_code}" ${URL_LANGUAGE_INC}"/) ]] && docker_compose_run_with_host_user_bash "wget -q -O inc/languages/${THEME_ACTIVE}_inc-${WP_LANG}.po ${URL_LANGUAGE_INC}/?format=po"
		[[ '200' = $(docker_compose_run_with_host_user_bash "curl -I -s -o /dev/null -w "%{http_code}" ${URL_LANGUAGE_INC}"/) ]] && docker_compose_run_with_host_user_bash "wget -q -O inc/languages/${THEME_ACTIVE}_inc-${WP_LANG}.mo ${URL_LANGUAGE_INC}/?format=mo"
	fi

	docker_compose_run_with_host_user_bash "ls -1 ${PACKAGES_THEME_LANGUAGES_DIR} | xargs -I % ln -sf ../../../../${PACKAGES_THEME_LANGUAGES_DIR}/% ${THEME_LANGUAGES_DIR}/"
	docker_compose_run_with_host_user_bash "ls -1 ${PACKAGES_PLUGINS_LANGUAGES_DIR} | xargs -I % ln -sf ../../../../${PACKAGES_PLUGINS_LANGUAGES_DIR}/% ${PLUGINS_LANGUAGES_DIR}/"

	WP_COMPOSER_INFO=$(${WP_COMPOSER} info | tr -s " " | sed 's/[ \t]/,/g' | cut -d "," -f 1,2)

	while IFS="," read -u 3 package version; do
		if [[ ${package} == "johnpbloch/wordpress-core" ]]; then
			if [[ ${version} == *".0" ]]; then
				version=$(echo "${version}" | sed 's/..$//')
			fi
			URL="https://downloads.wordpress.org/translation/core/${version}/${WP_LANG}.zip"
			[[ '200' = $(docker_compose_run_with_host_user_bash "curl -I -s -o /dev/null -w "%{http_code}" ${URL}") ]] && docker_compose_run_with_host_user_bash "wget -q -O tmp.zip ${URL} && unzip -qqod ${LANGUAGES_DIR} tmp.zip && rm tmp.zip"

		elif [[ ${package} == *"wpackagist-plugin/"* ]]; then
			plugin=$(echo ${package} | awk -F'wpackagist-plugin/' '{ print $2 }')
			URL="https://downloads.wordpress.org/translation/plugin/${plugin}/${version}/${WP_LANG}.zip"
			[[ '200' = $(docker_compose_run_with_host_user_bash "curl -I -s -o /dev/null -w "%{http_code}" ${URL}") ]] && docker_compose_run_with_host_user_bash "wget -q -O tmp.zip ${URL} && unzip -qqod ${PLUGINS_LANGUAGES_DIR} tmp.zip && rm tmp.zip"

		elif [[ ${package} == *"wpackagist-theme/"* ]]; then
			theme=$(echo ${package} | awk -F'wpackagist-theme/' '{ print $2 }')
			URL="https://downloads.wordpress.org/translation/plugin/${theme}/${version}/${WP_LANG}.zip"
			[[ '200' = $(docker_compose_run_with_host_user_bash "curl -I -s -o /dev/null -w "%{http_code}" ${URL}") ]] && docker_compose_run_with_host_user_bash "wget -q -O tmp.zip ${URL} && unzip -qqod ${THEME_LANGUAGES_DIR} tmp.zip && rm tmp.zip"
		fi
	done 3< <(printf '%s\n' "${WP_COMPOSER_INFO}")
}

shutdown_network() {
	docker_compose down ${DOCKER_COMPOSE_DOWN_OPTIONS}
}

build_docker_image() {
	cd ${PROJECT_ROOT_PATH}
	cleanup build
	mkdir -p ${ENV_ROOT_PATH}

	# Copy file to execute the build process
	rsync -aR ${BUILD_FILES[@]} ${ENV_ROOT_PATH}/

	# Copy mu-plugins files to public directory
	DEST_DIR=${ENV_ROOT_PATH}/public/packages/mu-plugins
	unlink ${DEST_DIR}
	mkdir -p ${DEST_DIR}
	rsync -a ${PROJECT_ROOT_PATH}/wp-packages/mu-plugins/* ${DEST_DIR}

	# Cleanup not necessary files after the build
	for DIRECTORY in "${BUILD_CLEAN_FILES[@]}"; do
		cleanup ${ENV_ROOT_PATH}/${DIRECTORY}
	done

	# Build WP-CLI image
	CLI_IMAGE=${REGISTRY_ENDPOINT}/${REPOSITORY_NAME}:cli
	PHP_IMAGES_DIR=${ENVIRONMENT_DIR}/docker/php
	tar -zcf ${PHP_IMAGES_DIR}/dist-cli.tar.gz -C ${ENV_ROOT_PATH} cli inc public themes

	# Build server image
	SERVER_IMAGE_DIR=${ENVIRONMENT_DIR}/docker/nginx
	tar -zcf ${SERVER_IMAGE_DIR}/dist.tar.gz -C ${ENV_ROOT_PATH} public themes

	# Build WordPress PHP-FPM image
	tar -zcf ${PHP_IMAGES_DIR}/dist-fpm.tar.gz -C ${ENV_ROOT_PATH} inc public themes

	# Build dist images
	docker_compose_dist build

	# Cleanup build directory
	cleanup build
}

main "$@"
