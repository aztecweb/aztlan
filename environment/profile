#!/bin/bash

# Import .env data
. environment/env/app.env

# Docker Compose services
project=$(basename $(pwd))
os=$(uname -s)
compose="VOLUME_PREFIX=\"${project}_\" docker-compose -p ${project} -f environment/docker-compose.yml"

if [ 'Darwin' = $os ]; then
	compose="${compose} -f environment/docker-compose.mac.yml"
fi

# docker-compose
alias project-docker-compose="${compose}"

## WP CLI
function wp() {
	if [ "$1" != "bash" ]; then
		eval $(echo ${compose} run --rm wp --path=public/wp $@)
	else
		eval $(echo ${compose} run --rm wp $@)
	fi
}

## Server
alias server="${compose} up -d server"

## Node
alias node="${compose} run --rm assets-node"
alias assets-watch="node npm run watch"
alias assets-build="node npm run build"

# Lint
alias jslint="node npm run lint:js"
alias stylint="node npm run lint:style"

# PHPQA
alias phpqa="${compose} run --rm phpqa"

## Composer
alias cli-composer="${compose} run --rm cli-composer"
alias inc-composer="${compose} run --rm inc-composer"
alias wp-composer="${compose} run --rm wp-composer"
alias phpqa-composer="${compose} run --rm phpqa-composer"

# Database export
alias db-export="wp db export - | gzip > environment/initdb/initdb.sql.gz"

# Database reload
# This command decompresses the database because a direct import can cause
# memory overload and close bash.
db_path="environment/initdb/"
db_name="initdb.sql"
alias db-reload="[ -f ${db_path}${db_name}.gz ] &&
		eval '
			wp db reset --yes &&
			gunzip -cd ${db_path}${db_name}.gz > ${db_path}${db_name} &&
			wp db import ${db_path}${db_name} &&
			rm ${db_path}${db_name}
		' && echo 'Database reloaded' || echo '${db_name} not found in ${db_path}'
	"

# SMTP
alias smtp="${compose} up smtp"

# Logs
alias logs-fpm="${compose} logs -f wordpress"
alias logs-nginx="${compose} logs -f server"

# Shutdown
alias down="${compose} down"

# Deployer
alias deploy-ssh-keygen="mkdir -p deploy/.ssh && ssh-keygen -f deploy/.ssh/id_ed25519 -t ed25519 -N ''"
alias deploy-ssh-key="cat deploy/.ssh/id_ed25519.pub"
function dep() {
	eval $(echo ${compose} run --rm deployer $@ --log deploy.log | tr -d \')
}

# Webgrind (Xdebug profiling viewer)
alias webgrind="${compose} up -d webgrind"

# Docker sync
. environment/bin/shared/docker_sync.sh
alias project-docker-sync="docker_sync"

# Languages POT generation
function i18n() {
	eval $(echo ${compose} run --rm -u 82:82 wp i18n make-pot --domain=${THEME_ACTIVE}_inc inc/src inc/languages/${THEME_ACTIVE}_inc.pot)
	eval $(echo ${compose} run --rm -u 82:82 wp i18n make-pot themes/${THEME_ACTIVE} themes/${THEME_ACTIVE}/languages/${THEME_ACTIVE}.pot)

}
